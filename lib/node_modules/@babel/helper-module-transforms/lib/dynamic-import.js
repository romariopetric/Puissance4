"use strict";

require("core-js/modules/web.dom-collections.iterator.js");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
function _taggedTemplateLiteral(e, t) { return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } })); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildDynamicImport = buildDynamicImport;
var _core = require("@babel/core");
{
  exports.getDynamicImportSource = function getDynamicImportSource(node) {
    const [source] = node.arguments;
    return _core.types.isStringLiteral(source) || _core.types.isTemplateLiteral(source) ? source : _core.template.expression.ast(_templateObject || (_templateObject = _taggedTemplateLiteral(["`${", "}`"], ["\\`\\${", "}\\`"])), source);
  };
}
function buildDynamicImport(node, deferToThen, wrapWithPromise, builder) {
  const specifier = _core.types.isCallExpression(node) ? node.arguments[0] : node.source;
  if (_core.types.isStringLiteral(specifier) || _core.types.isTemplateLiteral(specifier) && specifier.quasis.length === 0) {
    if (deferToThen) {
      return _core.template.expression.ast(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n        Promise.resolve().then(() => ", ")\n      "])), builder(specifier));
    } else return builder(specifier);
  }
  const specifierToString = _core.types.isTemplateLiteral(specifier) ? _core.types.identifier("specifier") : _core.types.templateLiteral([_core.types.templateElement({
    raw: ""
  }), _core.types.templateElement({
    raw: ""
  })], [_core.types.identifier("specifier")]);
  if (deferToThen) {
    return _core.template.expression.ast(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      (specifier =>\n        new Promise(r => r(", "))\n          .then(s => ", ")\n      )(", ")\n    "])), specifierToString, builder(_core.types.identifier("s")), specifier);
  } else if (wrapWithPromise) {
    return _core.template.expression.ast(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      (specifier =>\n        new Promise(r => r(", "))\n      )(", ")\n    "])), builder(specifierToString), specifier);
  } else {
    return _core.template.expression.ast(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n      (specifier => ", ")(", ")\n    "])), builder(specifierToString), specifier);
  }
}