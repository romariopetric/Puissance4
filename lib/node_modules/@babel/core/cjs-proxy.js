"use strict";

require("core-js/modules/es.promise.js");
require("core-js/modules/es.weak-map.js");
require("core-js/modules/web.dom-collections.iterator.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const babelP = Promise.resolve().then(() => _interopRequireWildcard(require("./lib/index.js")));
let babel = null;
Object.defineProperty(exports, "__ initialize @babel/core cjs proxy __", {
  set(val) {
    babel = val;
  }
});
exports.version = require("./package.json").version;
const functionNames = ["createConfigItem", "loadPartialConfig", "loadOptions", "transform", "transformFile", "transformFromAst", "parse"];
const propertyNames = ["buildExternalHelpers", "types", "tokTypes", "traverse", "template"];
for (const name of functionNames) {
  exports[name] = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (process.env.BABEL_8_BREAKING && typeof args[args.length - 1] !== "function") {
      throw new Error("Starting from Babel 8.0.0, the '".concat(name, "' function expects a callback. If you need to call it synchronously, please use '").concat(name, "Sync'."));
    }
    babelP.then(babel => {
      babel[name](...args);
    });
  };
  exports["".concat(name, "Async")] = function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return babelP.then(babel => babel["".concat(name, "Async")](...args));
  };
  exports["".concat(name, "Sync")] = function () {
    if (!babel) throw notLoadedError("".concat(name, "Sync"), "callable");
    return babel["".concat(name, "Sync")](...arguments);
  };
}
for (const name of propertyNames) {
  Object.defineProperty(exports, name, {
    get() {
      if (!babel) throw notLoadedError(name, "accessible");
      return babel[name];
    }
  });
}
function notLoadedError(name, keyword) {
  return new Error("The `".concat(name, "` export of @babel/core is only ").concat(keyword) + " from the CommonJS version after that the ESM version is loaded.");
}